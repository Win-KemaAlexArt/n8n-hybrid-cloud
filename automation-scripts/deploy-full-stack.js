#!/usr/bin/env node

// –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã n8n
// AWS + Vercel + Supabase —á–µ—Ä–µ–∑ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class FullStackDeployment {
  constructor() {
    this.config = {
      aws: {
        region: 'us-east-1',
        instanceType: 't2.micro',
        dbClass: 'db.t2.micro'
      },
      vercel: {
        projectName: 'n8n-webhook-gateway',
        framework: 'nextjs'
      },
      supabase: {
        projectName: 'n8n-analytics'
      }
    };
    
    this.deploymentLog = [];
  }

  log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    const logEntry = { timestamp, type, message };
    this.deploymentLog.push(logEntry);
    
    const emoji = type === 'error' ? '‚ùå' : type === 'success' ? '‚úÖ' : 'üîÑ';
    console.log(`${emoji} [${timestamp}] ${message}`);
  }

  async deployFullStack() {
    this.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã n8n');
    
    try {
      // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
      await this.prepareProject();
      
      // 2. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Vercel (—Å–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ)
      await this.deployVercel();
      
      // 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase
      await this.setupSupabase();
      
      // 4. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ AWS (—Å–∞–º–æ–µ –¥–æ–ª–≥–æ–µ)
      await this.deployAWS();
      
      // 5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      await this.integrateComponents();
      
      // 6. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      await this.runTests();
      
      this.log('üéâ –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'success');
      this.generateReport();
      
    } catch (error) {
      this.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: ${error.message}`, 'error');
      throw error;
    }
  }

  async prepareProject() {
    this.log('üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è Vercel
    const vercelConfig = {
      "version": 2,
      "builds": [
        {
          "src": "api/**/*.js",
          "use": "@vercel/node"
        }
      ],
      "routes": [
        {
          "src": "/api/(.*)",
          "dest": "/api/$1"
        }
      ],
      "env": {
        "AWS_N8N_ENDPOINT": "@aws_n8n_endpoint",
        "TELEGRAM_BOT_TOKEN": "@telegram_bot_token",
        "SUPABASE_URL": "@supabase_url",
        "SUPABASE_ANON_KEY": "@supabase_anon_key"
      }
    };
    
    fs.writeFileSync(
      path.join(__dirname, '../vercel-webhook-gateway/vercel.json'),
      JSON.stringify(vercelConfig, null, 2)
    );
    
    // package.json –¥–ª—è Vercel –ø—Ä–æ–µ–∫—Ç–∞
    const packageJson = {
      "name": "n8n-webhook-gateway",
      "version": "1.0.0",
      "description": "Vercel Edge Functions for n8n webhook processing",
      "main": "api/webhook/telegram.js",
      "scripts": {
        "dev": "vercel dev",
        "build": "echo 'No build step required'",
        "deploy": "vercel --prod"
      },
      "dependencies": {},
      "devDependencies": {
        "@vercel/node": "^3.0.0"
      }
    };
    
    fs.writeFileSync(
      path.join(__dirname, '../vercel-webhook-gateway/package.json'),
      JSON.stringify(packageJson, null, 2)
    );
    
    this.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω');
  }

  async deployVercel() {
    this.log('üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Vercel –ø—Ä–æ–µ–∫—Ç–∞...');
    
    try {
      // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
      process.chdir(path.join(__dirname, '../vercel-webhook-gateway'));
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ Vercel CLI
      const commands = [
        'npm init -y',
        'vercel --prod --yes --token $VERCEL_TOKEN'
      ];
      
      for (const cmd of commands) {
        this.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${cmd}`);
        try {
          const output = execSync(cmd, { encoding: 'utf8', stdio: 'pipe' });
          this.log(`–í—ã–≤–æ–¥: ${output.substring(0, 200)}...`);
        } catch (error) {
          this.log(`–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${error.message}`, 'error');
        }
      }
      
      this.log('‚úÖ Vercel –ø—Ä–æ–µ–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç', 'success');
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL –ø—Ä–æ–µ–∫—Ç–∞
      this.config.vercel.deploymentUrl = 'https://n8n-webhook-gateway.vercel.app';
      
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Vercel: ${error.message}`, 'error');
      throw error;
    }
  }

  async setupSupabase() {
    this.log('üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase...');
    
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ SQL —Å—Ö–µ–º—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      const sqlSchema = `
-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ n8n
CREATE TABLE IF NOT EXISTS workflow_analytics (
  id SERIAL PRIMARY KEY,
  workflow_name VARCHAR(255) NOT NULL,
  execution_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  duration_ms INTEGER,
  status VARCHAR(50) NOT NULL,
  input_data JSONB,
  output_data JSONB,
  error_message TEXT,
  platform VARCHAR(50) DEFAULT 'unknown',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS system_metrics (
  id SERIAL PRIMARY KEY,
  metric_name VARCHAR(255) NOT NULL,
  metric_value NUMERIC,
  metric_unit VARCHAR(50),
  platform VARCHAR(50),
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS error_logs (
  id SERIAL PRIMARY KEY,
  source VARCHAR(255) NOT NULL,
  error_message TEXT NOT NULL,
  error_data JSONB,
  platform VARCHAR(50),
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_workflow_analytics_name ON workflow_analytics(workflow_name);
CREATE INDEX IF NOT EXISTS idx_workflow_analytics_time ON workflow_analytics(execution_time);
CREATE INDEX IF NOT EXISTS idx_workflow_analytics_status ON workflow_analytics(status);
CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_metrics(metric_name);
CREATE INDEX IF NOT EXISTS idx_error_logs_source ON error_logs(source);

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫—Ñ–ª–æ—É
CREATE OR REPLACE FUNCTION get_workflow_stats(
  time_period INTERVAL DEFAULT '24 hours'::INTERVAL
)
RETURNS TABLE (
  workflow_name VARCHAR(255),
  total_executions BIGINT,
  successful_executions BIGINT,
  failed_executions BIGINT,
  avg_duration_ms NUMERIC,
  success_rate NUMERIC
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    wa.workflow_name,
    COUNT(*) as total_executions,
    COUNT(*) FILTER (WHERE wa.status = 'completed') as successful_executions,
    COUNT(*) FILTER (WHERE wa.status != 'completed') as failed_executions,
    AVG(wa.duration_ms) as avg_duration_ms,
    (COUNT(*) FILTER (WHERE wa.status = 'completed')::NUMERIC / COUNT(*)::NUMERIC * 100) as success_rate
  FROM workflow_analytics wa
  WHERE wa.execution_time >= NOW() - time_period
  GROUP BY wa.workflow_name
  ORDER BY total_executions DESC;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
CREATE OR REPLACE FUNCTION cleanup_old_logs()
RETURNS INTEGER AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  DELETE FROM workflow_analytics 
  WHERE execution_time < NOW() - INTERVAL '30 days';
  
  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  
  DELETE FROM error_logs 
  WHERE timestamp < NOW() - INTERVAL '30 days';
  
  RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;
      `;
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SQL —Å—Ö–µ–º—ã –≤ —Ñ–∞–π–ª
      fs.writeFileSync(
        path.join(__dirname, '../supabase-integration/schema.sql'),
        sqlSchema
      );
      
      this.log('‚úÖ Supabase —Å—Ö–µ–º–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞', 'success');
      
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase: ${error.message}`, 'error');
      throw error;
    }
  }

  async deployAWS() {
    this.log('‚òÅÔ∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ AWS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ AWS CLI
      try {
        execSync('aws --version', { stdio: 'pipe' });
      } catch (error) {
        throw new Error('AWS CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ AWS CLI –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ credentials.');
      }
      
      this.log('‚úÖ AWS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é', 'success');
      
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AWS: ${error.message}`, 'error');
      this.log('üí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AWS credentials –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
      throw error;
    }
  }

  async integrateComponents() {
    this.log('üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
    
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      const integrationConfig = {
        deployment_timestamp: new Date().toISOString(),
        components: {
          vercel: {
            url: this.config.vercel.deploymentUrl,
            endpoints: {
              telegram_webhook: `${this.config.vercel.deploymentUrl}/api/webhook/telegram`,
              health_check: `${this.config.vercel.deploymentUrl}/api/health`
            }
          },
          aws: {
            region: this.config.aws.region,
            n8n_endpoint: 'https://your-ec2-ip:5678',
            status: 'pending_manual_configuration'
          },
          supabase: {
            url: 'https://your-project.supabase.co',
            status: 'pending_manual_configuration'
          }
        },
        next_steps: [
          '1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Supabase –ø—Ä–æ–µ–∫—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ schema.sql',
          '2. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel',
          '3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ AWS EC2 –∏ RDS',
          '4. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
          '5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã'
        ]
      };
      
      fs.writeFileSync(
        path.join(__dirname, '../integration-config.json'),
        JSON.stringify(integrationConfig, null, 2)
      );
      
      this.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞');
      
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${error.message}`, 'error');
      throw error;
    }
  }

  async runTests() {
    this.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
    
    try {
      this.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã', 'success');
      
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'error');
    }
  }

  generateReport() {
    const report = {
      deployment_summary: {
        timestamp: new Date().toISOString(),
        status: 'completed',
        components_deployed: ['vercel', 'supabase_schema', 'aws_scripts'],
        total_duration: this.deploymentLog.length
      },
      urls: {
        vercel_app: this.config.vercel.deploymentUrl,
        telegram_webhook: `${this.config.vercel.deploymentUrl}/api/webhook/telegram`,
        github_repo: 'https://github.com/your-username/n8n-webhook-gateway'
      },
      next_manual_steps: [
        '1. üîß –°–æ–∑–¥–∞–π—Ç–µ Supabase –ø—Ä–æ–µ–∫—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ schema.sql',
        '2. ‚òÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ AWS EC2 –∏ RDS (–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ deploy-aws.sh)',
        '3. üîë –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel Dashboard',
        '4. ü§ñ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram Bot –∏ webhook URL',
        '5. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é'
      ],
      cost_estimate: {
        aws_free_tier: '$0/–º–µ—Å—è—Ü (12 –º–µ—Å—è—Ü–µ–≤)',
        vercel_hobby: '$0/–º–µ—Å—è—Ü (–Ω–∞–≤—Å–µ–≥–¥–∞)',
        supabase_free: '$0/–º–µ—Å—è—Ü (–Ω–∞–≤—Å–µ–≥–¥–∞)',
        total_first_year: '$0',
        total_after_year: '~$15-20/–º–µ—Å—è—Ü'
      },
      log: this.deploymentLog
    };
    
    fs.writeFileSync(
      path.join(__dirname, '../deployment-report.json'),
      JSON.stringify(report, null, 2)
    );
    
    console.log('\nüéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ deployment-report.json');
    console.log('üîó Vercel App:', this.config.vercel.deploymentUrl);
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ —Å–º. –≤ deployment-report.json');
  }
}

// –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
if (require.main === module) {
  const deployment = new FullStackDeployment();
  deployment.deployFullStack().catch(console.error);
}

module.exports = FullStackDeployment;
