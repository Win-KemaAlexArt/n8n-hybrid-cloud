#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase –≤ –ø—Ä–æ–µ–∫—Ç–µ

const fs = require('fs');
const path = require('path');

class SupabaseConfigUpdater {
  constructor() {
    this.configPath = path.join(__dirname, '../supabase-config.json');
    this.vercelEnvPath = path.join(__dirname, '../vercel-webhook-gateway/.env.local');
  }

  updateConfig() {
    console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase...');
    
    try {
      // –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase
      const config = JSON.parse(fs.readFileSync(this.configPath, 'utf8'));
      
      if (config.project_url === '–í–°–¢–ê–í–¨_–°–Æ–î–ê_PROJECT_URL') {
        console.log('‚ùå –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç–µ supabase-config.json —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
        console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ supabase-config.json');
        console.log('2. –ó–∞–º–µ–Ω–∏—Ç–µ –≤—Å–µ –í–°–¢–ê–í–¨_–°–Æ–î–ê_* –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Supabase');
        console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');
        return;
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ .env.local –¥–ª—è Vercel
      const envContent = `# Supabase Configuration
SUPABASE_URL=${config.project_url}
SUPABASE_ANON_KEY=${config.anon_key}
SUPABASE_SERVICE_ROLE_KEY=${config.service_role_key}

# AWS Configuration (–æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AWS)
AWS_N8N_ENDPOINT=https://your-ec2-ip:5678

# Telegram Bot (–ø–æ–ª—É—á–∏—Ç–µ –æ—Ç @BotFather)
TELEGRAM_BOT_TOKEN=your_telegram_bot_token
`;

      fs.writeFileSync(this.vercelEnvPath, envContent);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ credentials.json
      const credentialsPath = path.join(__dirname, '../credentials.json');
      let credentials = {};
      
      if (fs.existsSync(credentialsPath)) {
        credentials = JSON.parse(fs.readFileSync(credentialsPath, 'utf8'));
      }
      
      credentials.supabase = {
        project_url: config.project_url,
        anon_key: config.anon_key,
        service_role_key: config.service_role_key,
        database_password: config.database_password,
        updated_at: new Date().toISOString()
      };
      
      fs.writeFileSync(credentialsPath, JSON.stringify(credentials, null, 2));
      
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
      console.log('üìÅ –§–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:');
      console.log('  - .env.local (–¥–ª—è Vercel)');
      console.log('  - credentials.json (–æ–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)');
      console.log('');
      console.log('üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('1. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ Vercel –ø—Ä–æ–µ–∫—Ç: cd vercel-webhook-gateway && vercel --prod');
      console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel Dashboard');
      console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ AWS —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: bash aws-infrastructure/deploy-aws.sh');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
    }
  }

  testConnection() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    
    try {
      const config = JSON.parse(fs.readFileSync(this.configPath, 'utf8'));
      
      if (config.project_url === '–í–°–¢–ê–í–¨_–°–Æ–î–ê_PROJECT_URL') {
        console.log('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ supabase-config.json');
        return;
      }
      
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const testScript = `
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient('${config.project_url}', '${config.anon_key}');

async function testConnection() {
  try {
    const { data, error } = await supabase
      .from('workflow_analytics')
      .select('count')
      .limit(1);
    
    if (error && error.code !== 'PGRST116') {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    } else {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!');
    }
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', err.message);
  }
}

testConnection();
      `;
      
      fs.writeFileSync(path.join(__dirname, 'test-supabase.js'), testScript);
      console.log('üìù –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: automation-scripts/test-supabase.js');
      console.log('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node automation-scripts/test-supabase.js');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  const updater = new SupabaseConfigUpdater();
  
  const command = process.argv[2];
  if (command === 'test') {
    updater.testConnection();
  } else {
    updater.updateConfig();
  }
}

module.exports = SupabaseConfigUpdater;
